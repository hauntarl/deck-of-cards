package deck

import (
	"fmt"
	"testing"
)

// ExampleCard tests the output generated by
//  go:generate stringer -type=Suit,Rank -output card_string.go
func ExampleCard() {
	fmt.Println(Card{Rank: Ace, Suit: Heart})
	fmt.Println(Card{Rank: Two, Suit: Spade})
	fmt.Println(Card{Rank: Nine, Suit: Club})
	fmt.Println(Card{Rank: Jack, Suit: Diamond})
	fmt.Println(Card{Suit: Joker})

	// Output:
	// Ace of Hearts
	// Two of Spades
	// Nine of Clubs
	// Jack of Diamonds
	// Joker
}

// TestNew validates the output from constructor of deck of cards.
func TestNew(t *testing.T) {
	cards := New()
	// expected number of cards in a deck = 13 ranks * 4 suits
	if len(cards) != 13*4 {
		t.Fatalf("expected %d cards, got: %d", 13*4, len(cards))
	}
	// first 13 cards are all of one suit
	fir := cards[0].Suit
	for i := 1; i < 13; i++ {
		if cards[i].Suit != fir {
			t.Fatal("first 13 cards of given deck do not belong to same suit.")
		}
	}
	// next 13 are of different suit
	sec := cards[13].Suit
	for i := 14; i < 26; i++ {
		if cards[i].Suit != sec {
			t.Fatal("next 13 cards of given deck do not belong to same suit.")
		}
	}
	// all the suits are present
	set := map[Suit]struct{}{}
	for i := 0; i < len(cards); i += 13 {
		set[cards[i].Suit] = struct{}{}
	}
	if len(set) != 4 {
		t.Fatalf("expected 4 suits, got: %d", len(set))
	}
}
